/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./_routes/__root";
import { Route as UsersRouteImport } from "./_routes/users";
import { Route as SettingsRouteImport } from "./_routes/settings";
import { Route as PropertiesRouteImport } from "./_routes/properties";
import { Route as FavoritesRouteImport } from "./_routes/favorites";
import { Route as IndexRouteImport } from "./_routes/index";
import { Route as PropertiesAddRouteImport } from "./_routes/properties.add";
import { Route as PropertiesIdRouteImport } from "./_routes/properties.$id";
import { Route as PropertiesIdEditRouteImport } from "./_routes/properties.$id.edit";

const UsersRoute = UsersRouteImport.update({
  id: "/users",
  path: "/users",
  getParentRoute: () => rootRouteImport,
} as any);
const SettingsRoute = SettingsRouteImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRouteImport,
} as any);
const PropertiesRoute = PropertiesRouteImport.update({
  id: "/properties",
  path: "/properties",
  getParentRoute: () => rootRouteImport,
} as any);
const FavoritesRoute = FavoritesRouteImport.update({
  id: "/favorites",
  path: "/favorites",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const PropertiesAddRoute = PropertiesAddRouteImport.update({
  id: "/add",
  path: "/add",
  getParentRoute: () => PropertiesRoute,
} as any);
const PropertiesIdRoute = PropertiesIdRouteImport.update({
  id: "/$id",
  path: "/$id",
  getParentRoute: () => PropertiesRoute,
} as any);
const PropertiesIdEditRoute = PropertiesIdEditRouteImport.update({
  id: "/edit",
  path: "/edit",
  getParentRoute: () => PropertiesIdRoute,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/favorites": typeof FavoritesRoute;
  "/properties": typeof PropertiesRouteWithChildren;
  "/settings": typeof SettingsRoute;
  "/users": typeof UsersRoute;
  "/properties/$id": typeof PropertiesIdRouteWithChildren;
  "/properties/add": typeof PropertiesAddRoute;
  "/properties/$id/edit": typeof PropertiesIdEditRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/favorites": typeof FavoritesRoute;
  "/properties": typeof PropertiesRouteWithChildren;
  "/settings": typeof SettingsRoute;
  "/users": typeof UsersRoute;
  "/properties/$id": typeof PropertiesIdRouteWithChildren;
  "/properties/add": typeof PropertiesAddRoute;
  "/properties/$id/edit": typeof PropertiesIdEditRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/favorites": typeof FavoritesRoute;
  "/properties": typeof PropertiesRouteWithChildren;
  "/settings": typeof SettingsRoute;
  "/users": typeof UsersRoute;
  "/properties/$id": typeof PropertiesIdRouteWithChildren;
  "/properties/add": typeof PropertiesAddRoute;
  "/properties/$id/edit": typeof PropertiesIdEditRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/favorites"
    | "/properties"
    | "/settings"
    | "/users"
    | "/properties/$id"
    | "/properties/add"
    | "/properties/$id/edit";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/favorites"
    | "/properties"
    | "/settings"
    | "/users"
    | "/properties/$id"
    | "/properties/add"
    | "/properties/$id/edit";
  id:
    | "__root__"
    | "/"
    | "/favorites"
    | "/properties"
    | "/settings"
    | "/users"
    | "/properties/$id"
    | "/properties/add"
    | "/properties/$id/edit";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  FavoritesRoute: typeof FavoritesRoute;
  PropertiesRoute: typeof PropertiesRouteWithChildren;
  SettingsRoute: typeof SettingsRoute;
  UsersRoute: typeof UsersRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/users": {
      id: "/users";
      path: "/users";
      fullPath: "/users";
      preLoaderRoute: typeof UsersRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/settings": {
      id: "/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/properties": {
      id: "/properties";
      path: "/properties";
      fullPath: "/properties";
      preLoaderRoute: typeof PropertiesRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/favorites": {
      id: "/favorites";
      path: "/favorites";
      fullPath: "/favorites";
      preLoaderRoute: typeof FavoritesRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/properties/add": {
      id: "/properties/add";
      path: "/add";
      fullPath: "/properties/add";
      preLoaderRoute: typeof PropertiesAddRouteImport;
      parentRoute: typeof PropertiesRoute;
    };
    "/properties/$id": {
      id: "/properties/$id";
      path: "/$id";
      fullPath: "/properties/$id";
      preLoaderRoute: typeof PropertiesIdRouteImport;
      parentRoute: typeof PropertiesRoute;
    };
    "/properties/$id/edit": {
      id: "/properties/$id/edit";
      path: "/edit";
      fullPath: "/properties/$id/edit";
      preLoaderRoute: typeof PropertiesIdEditRouteImport;
      parentRoute: typeof PropertiesIdRoute;
    };
  }
}

interface PropertiesIdRouteChildren {
  PropertiesIdEditRoute: typeof PropertiesIdEditRoute;
}

const PropertiesIdRouteChildren: PropertiesIdRouteChildren = {
  PropertiesIdEditRoute: PropertiesIdEditRoute,
};

const PropertiesIdRouteWithChildren = PropertiesIdRoute._addFileChildren(
  PropertiesIdRouteChildren,
);

interface PropertiesRouteChildren {
  PropertiesIdRoute: typeof PropertiesIdRouteWithChildren;
  PropertiesAddRoute: typeof PropertiesAddRoute;
}

const PropertiesRouteChildren: PropertiesRouteChildren = {
  PropertiesIdRoute: PropertiesIdRouteWithChildren,
  PropertiesAddRoute: PropertiesAddRoute,
};

const PropertiesRouteWithChildren = PropertiesRoute._addFileChildren(
  PropertiesRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FavoritesRoute: FavoritesRoute,
  PropertiesRoute: PropertiesRouteWithChildren,
  SettingsRoute: SettingsRoute,
  UsersRoute: UsersRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
